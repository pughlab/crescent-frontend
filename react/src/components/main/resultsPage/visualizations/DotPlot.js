import React, {useState, useEffect, useCallback } from 'react'
import Plot from 'react-plotly.js'
import withRedux from '../../../../redux/hoc'
import { Image, Container, Header, Segment, Dimmer} from 'semantic-ui-react'

import Tada from 'react-reveal/Tada'
import Logo from '../../../login/logo.jpg'
import {ClimbingBoxLoader} from 'react-spinners'

import * as R from 'ramda'

import {useDispatch} from 'react-redux'
import {useCrescentContext, useResultsPage} from '../../../../redux/hooks'
import {useResultsPagePlotQuery} from '../../../../redux/hooks/useResultsPage'
import {useResultsAvailableQuery, useScatterQuery, useScatterNumericQuery, useOpacityQuery, useNumericGroupsQuery} from '../../../../apollo/hooks'

const DotPlot = ({
  plotQueryIndex
}) => {
  const {runID} = useCrescentContext()

  const dispatch = useDispatch()
  const {activeResult, selectedFeature, selectedGroup, selectedDiffExpression} = useResultsPagePlotQuery(plotQueryIndex)
  const isFeatureNotSelected = R.or(R.isNil, R.isEmpty)(selectedFeature)


  const plots = useResultsAvailableQuery(runID)
  // const scatter = useScatterQuery(activeResult, selectedGroup, runID, selectedDiffExpression)
  // const scatterNumeric = useScatterNumericQuery(activeResult, selectedGroup, runID, selectedDiffExpression)
  // const opacity = useOpacityQuery(activeResult, selectedFeature, selectedGroup, runID, selectedDiffExpression)
  // const numericGroups = useNumericGroupsQuery(runID, selectedDiffExpression)

  if (R.any(R.isNil, [plots])) {
    return null
  }

  // if (R.any(R.isNil, [scatter])) {
  //   return (
  //     <Segment basic style={{height: '100%'}} placeholder>
  //       <Tada forever duration={1000}>
  //         <Image src={Logo} centered size='medium' />
  //       </Tada>
  //     </Segment>
  //   )
  // }

  // if ((R.not(isFeatureNotSelected)) && (R.any(R.isNil, [opacity]))) {
  //   return (
  //     <Segment basic style={{height: '100%'}} placeholder>
  //       <Tada forever duration={1000}>
  //         <Image src={Logo} centered size='medium' />
  //       </Tada>
  //     </Segment>
  //   )
  // }


  const testData = [
      {
        "name": "0",
        "mode": "markers",
        "type": "scatter",
        "x": [
          -1.959,
          -2.215,
          -1.448,
          -0.298,
          -1.014,
          -2.175,
          0.269,
          -1.569,
          0.369,
          -1.261,
          -1.854,
          -1.651,
          -3.085,
          0.425,
          -1.769,
          -0.365,
          -0.15,
          -0.154,
          -0.726,
          -1.088,
          0.807,
          0.59,
          -0.874,
          -1.061,
          -1.48,
          -1.5,
          -0.823,
          -0.782,
          -0.6,
          -0.951,
          -1.338,
          -1.208,
          -0.47,
          -0.079,
          -0.227,
          -0.577,
          -0.529,
          -1.571,
          -0.381,
          -0.566,
          -1.241,
          -0.811,
          -1.067,
          -1.149,
          -1.33,
          0.848,
          -0.993,
          -1.228,
          -1.596,
          -0.611,
          -1.305,
          -1.69,
          -0.5,
          -0.725,
          -0.741,
          -0.335,
          -0.555,
          -0.446,
          -1.271,
          0.42,
          -0.534,
          -0.521,
          -1.819,
          -0.587,
          -1.668,
          -0.836,
          -0.895,
          -0.222,
          -1.356,
          -0.39,
          -1.465,
          -1.502,
          0.195,
          -0.725,
          -0.854,
          -0.276,
          -0.246,
          0.072,
          -0.86,
          -1.247,
          -1.503,
          0.274,
          -1.357,
          -0.495,
          -1.201,
          -0.924,
          -1.324,
          -1.353,
          -1.535,
          -1.611,
          -0.693,
          -1.234,
          -0.671,
          0.015,
          -0.531,
          0.244,
          -0.948,
          0.635,
          -0.883,
          0.465,
          -0.009,
          -1.361,
          0.053,
          1.012,
          -1.639,
          -1.21,
          -0.324,
          -0.707,
          -0.624,
          -0.771,
          -0.94,
          -0.811,
          0.195,
          -1.477,
          -0.35,
          -0.388,
          -1,
          0.431,
          1.167,
          -0.824,
          -0.82,
          0.261,
          -0.757,
          -1.596,
          -0.714,
          -0.729,
          -1.179,
          -1.26,
          -0.703,
          -1.157,
          -0.729,
          -0.59,
          -1.553,
          -1.642,
          -0.083,
          -0.949,
          -0.632,
          -0.575,
          -0.714,
          -0.697,
          -0.353,
          -0.656,
          -0.126,
          -1.468,
          -0.579,
          -0.507,
          -0.645,
          0.909,
          -1.19,
          -0.879,
          -0.69,
          -1.172,
          -0.59,
          -1.182,
          -0.64,
          -1.077,
          -1.542,
          -0.316,
          -0.384,
          -0.588,
          -0.548,
          -0.585,
          -1.151,
          -1.571,
          -0.801,
          -1.637,
          -0.646,
          -0.84,
          -1.535,
          -1.036,
          -1.374,
          -0.325,
          -1.309,
          0.44,
          -0.102,
          -1.21,
          0.477,
          -0.946,
          -1.109,
          -0.645,
          -1.117,
          0.108,
          -0.33,
          0.55,
          -1.066,
          -0.563,
          -1.535,
          -0.335,
          -0.423,
          -0.227,
          -1.024,
          -0.579,
          -0.527,
          -0.309,
          -1.508,
          -1.486,
          -1.253,
          -1.708,
          -1.298,
          -1.398,
          -0.526,
          -0.523,
          -0.873,
          -1.832,
          -0.848,
          -0.73,
          -0.518,
          -0.148,
          -1.193,
          -1.119,
          -0.409,
          -1.605,
          -1.012,
          -0.726,
          -1.534,
          -1.076,
          -0.927,
          -0.388,
          -0.236,
          -0.986,
          -1.413,
          0.275,
          -0.769,
          -1.897,
          -1.249,
          -0.758,
          -1.492,
          0.741,
          -0.992,
          -1.283,
          -1.048,
          -0.872,
          -0.964,
          -0.034,
          -1.153,
          -1.698,
          -1.213,
          -1.009,
          -0.196,
          -1.95,
          -1.483,
          -0.623,
          -0.981,
          -0.001,
          -1.377,
          -1.71,
          -1.021,
          -0.535,
          -1.633,
          -1.84,
          -0.718,
          -1.236,
          -0.146,
          -0.637,
          -0.248,
          0.439,
          -1.418,
          -0.925,
          -1.475,
          -0.834,
          -0.391,
          -1.435,
          0.534,
          -0.91,
          -0.811,
          -0.596,
          -1.33,
          -0.465,
          -1.066,
          -0.73,
          -0.202,
          -1.047,
          -0.279,
          -0.88,
          -0.758,
          -0.242,
          -0.789,
          -0.297,
          -1.254,
          -1.563,
          -1.368,
          0.189,
          -0.297,
          -0.997,
          -1.955,
          -1.929,
          1.213,
          -1.001,
          -1.143,
          -0.117,
          -1.275,
          -0.931,
          0.112,
          0.356,
          -1.168,
          -1.848,
          -0.482,
          -1.359,
          -1.765,
          -0.464,
          -1.353,
          -1.267,
          -0.54,
          -1.855,
          -0.512,
          -0.743,
          -1.343
        ],
        "y": [
          -5.14,
          -5.276,
          -6.625,
          -6.798,
          -6.497,
          -6.157,
          -6.798,
          -5.013,
          -5.415,
          -6.3,
          -5.715,
          -5.658,
          -5.461,
          -6.932,
          -6.252,
          -5.553,
          -5.822,
          -6.004,
          -5.086,
          -5.1,
          -7.023,
          -6.5,
          -6.097,
          -5.488,
          -5.971,
          -6.751,
          -6.079,
          -6.114,
          -3.887,
          -5.067,
          -6.266,
          -5.01,
          -6.045,
          -4.61,
          -5.191,
          -5.327,
          -6.563,
          -6.786,
          -3.718,
          -4.301,
          -7.048,
          -7.309,
          -5.492,
          -5.771,
          -6.167,
          -6.261,
          -4.854,
          -5.876,
          -6.5,
          -5.583,
          -5.033,
          -5.917,
          -7.367,
          -5.102,
          -4.895,
          -7.021,
          -5.41,
          -6.561,
          -6.292,
          -6.891,
          -6.934,
          -6.416,
          -6.661,
          -6.558,
          -6.064,
          -5.775,
          -6.697,
          -5.889,
          -5.591,
          -2.897,
          -6.242,
          -5.859,
          -6.817,
          -5.737,
          -5.062,
          -3.108,
          -5.676,
          -6.827,
          -6.855,
          -6.29,
          -6.804,
          -5.249,
          -5.699,
          -5.433,
          -5.256,
          -5.52,
          -6.52,
          -7,
          -5.972,
          -6.869,
          -7.181,
          -4.862,
          -6.026,
          -3.428,
          -3.936,
          -5.368,
          -6.384,
          -6.284,
          -4.89,
          -6.778,
          -4.973,
          -6.592,
          -5.753,
          -6.562,
          -6.154,
          -5.125,
          -3.567,
          -6.609,
          -5.803,
          -4.244,
          -6.695,
          -6.9,
          -5.128,
          -6.08,
          -5.828,
          -3.706,
          -5.65,
          -6.668,
          -6.462,
          -5.627,
          -5.834,
          -6.63,
          -6.116,
          -6.683,
          -4.759,
          -5.417,
          -5.421,
          -5.425,
          -5.605,
          -6.017,
          -5.431,
          -6.06,
          -5.93,
          -6.558,
          -5.541,
          -5.034,
          -5.62,
          -5.838,
          -5.61,
          -7.201,
          -3.121,
          -5.902,
          -3.472,
          -6.938,
          -6.919,
          -6.334,
          -5.843,
          -6.427,
          -5.879,
          -6.978,
          -7.2,
          -5.666,
          -4.117,
          -6.074,
          -4.577,
          -4.977,
          -5.198,
          -3.331,
          -5.594,
          -7.05,
          -6.764,
          -5.97,
          -5.266,
          -6.514,
          -5.456,
          -5.843,
          -6.193,
          -6.139,
          -6.362,
          -5.449,
          -5.733,
          -5.709,
          -6.804,
          -6.472,
          -2.928,
          -5.774,
          -6.296,
          -6.242,
          -5.381,
          -6.434,
          -6.552,
          -5.283,
          -4.87,
          -6.328,
          -5.641,
          -6.57,
          -6.922,
          -5.477,
          -5.908,
          -4.316,
          -5.777,
          -5.525,
          -2.891,
          -4.247,
          -6.759,
          -6.482,
          -5.317,
          -6.362,
          -6.363,
          -5.55,
          -5.657,
          -7.099,
          -7.329,
          -6.846,
          -6.483,
          -5.125,
          -6.738,
          -4.26,
          -6.934,
          -5.578,
          -6.949,
          -6.381,
          -6.149,
          -6.254,
          -6.113,
          -6.094,
          -7.282,
          -3.706,
          -5.836,
          -5.118,
          -6.392,
          -6.609,
          -5.519,
          -6.213,
          -7.123,
          -6.361,
          -6.212,
          -6.34,
          -6.522,
          -6.219,
          -5.924,
          -7.212,
          -5.702,
          -6.747,
          -6.006,
          -6.756,
          -6.914,
          -6.431,
          -3.527,
          -6.69,
          -6.811,
          -7.127,
          -6.917,
          -7.404,
          -6.548,
          -6.898,
          -7.08,
          -6.113,
          -6.395,
          -6.726,
          -5.15,
          -7.018,
          -3.098,
          -4.891,
          -4.437,
          -6.546,
          -5.963,
          -7.17,
          -6.945,
          -7.217,
          -7.13,
          -6.456,
          -6.699,
          -7.083,
          -7.201,
          -4.748,
          -5.315,
          -7.062,
          -5.678,
          -6.85,
          -3.828,
          -6.986,
          -6.835,
          -6.191,
          -6.341,
          -4.032,
          -6.981,
          -6.702,
          -6.867,
          -6.254,
          -7.028,
          -6.924,
          -6.459,
          -6.148,
          -6.563,
          -6.648,
          -6.283,
          -7.322,
          -6.91,
          -6.806,
          -5.833,
          -7.111,
          -6.863,
          -6.464,
          -6.878,
          -6.756,
          -6.85,
          -6.701,
          -6.696,
          -5.054,
          -6.139,
          -6.832,
          -7.166,
          -6.627,
          -7.267,
          -6.978,
          -5.685
        ],
        "marker": {
          "color": [
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C",
            "#B3446C"
          ]
        }
      }]

  const isLoading = false

  // // determine proper name of active plot
  const currentScatterPlotType = R.compose(
    R.prop('label'),
    R.find(R.propEq('result', activeResult)),
  )(plots)




  return (
    // <Dimmer.Dimmable dimmed={isLoading} style={{height:'100%'}}>
    // <Dimmer active={isLoading} inverted>
    //   <ClimbingBoxLoader color='#6435c9' />
    // </Dimmer>
    // <Segment style={{height: '100%'}}>
    <>
    <Header textAlign='center' content={currentScatterPlotType} />
      <Plot
        config={{showTips: false}}
        // data={opacity}
        // data={isFeatureNotSelected ? scatter : opacity}
        data={testData}
        useResizeHandler
        style={{width: '100%', height:'90%'}}
        layout={{
          autosize: true,
          hovermode: 'closest',
          xaxis: {showgrid: false, ticks: '', showticklabels: false},
          yaxis: {showgrid: false, ticks: '', showticklabels: false, scaleanchor: "x"},
          margin: {l:20, r:20, b:20, t:20},
          legend: {"orientation": "v"}
        }}
      />
    {/* </Dimmer.Dimmable> */}
  </>
  )
}

export default DotPlot 
